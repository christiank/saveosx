#! /bin/bash

# Copyright Â© 2014 Calum MacRae
# Use of this source code is governed by an ISC
# license that can be found in the LICENSE file.

# Save OS X bootstrapper to set-up Save OS X

# Ensure script is being run from the 'scripts' subdir
if [[ ! $(pwd) =~ .*\/saveosx.*\/scripts$ ]]; then
    echo "Please run this script from the inteded directory!"
    echo "For instructions, please see the README"
    exit 1
fi

# Grab funcs/vars
. resources

# First, drop any chached sudo access (sudo does not require a password to perform this function)
sudo -k

# Welcome screen
title ""$BLUE_UL"Welcome to Save OS X!"$ESC""

cat << EOM

Welcome to the Save OS X project, an effort to make OS X
a more comfortable system for hackers, developers & power users.

This script will set up your environment for you. It will automatically
install pkgsrc & its associated binary package manager - pkgin.
You will also have the choice to apply a seamless X11 environment that
we've put together for you!

Please enter your password for sudo authentication

EOM

# Prompt for initial sudo password (will be updated througout with `sudo -v`)
saferun sudo echo "sudo authenticaion successful!"
# Keep initial sudo auth alive
while true ; do sudo -n true ; sleep 60 ; kill -0 "$$" || exit ; done 2>/dev/null &
echo 
read -r -p "Press [Enter] to continue..."

# Grab pkgsrc
title ""$RED_UL"pkgsrc/pkgin"$ESC""
cat << EOM

`echo -e ""$YELLOW_UL"pkgsrc"$ESC""`
pkgsrc is a framework for building third-party software on NetBSD and other UNIX-like systems,
currently containing over 12000 packages. It is used to enable freely available software to be
configured and built easily on supported platforms.

`echo -e ""$YELLOW_UL"pkgin"$ESC""`
The pkgin command is aimed at being an apt/yum like tool for managing pkgsrc binary packages.
It relies on pkg_summary(5) for installation, removal and upgrade ofpackages and associated 
dependencies, using a remote repository.

Proceeding to download and install pkgsrc/pkgin tools....

EOM

# Check for Home Brew install
if [ -f /usr/local/bin/brew ]; then
    cat -<< EOM

`echo -e ""$RED"It looks like you have Home Brew installed. This could seriously conflict with pkgsrc!"`
`echo -e "As we don't wish to affect what you may have implemented, we'll leave it up to you to" `
`echo -e "remove it."$ESC""`

`echo -e ""$BLUE_UL"Once your system is rid of Home Brew; simply re-run this script to get going again!"$ESC""`

For now, here are the steps you need to take (with root privileges) to eradicate Home Brew from your system:

cd \`brew --prefix\`
rm -rf Cellar
brew prune
rm \`git ls-files\`
rm -rf Library/{Homebrew,Aliases,Formula,Contributions}
rm -rf .git
rm -rf ~/Library/Caches/Homebrew
rm -rf /usr/local/bin/brew

Note: You may also need to remove ~/.homebrew. If you happen to be using rvm, then ~/.rvm/bin/brew should
      also be deleted.

`echo -e ""$RED_UL"WARNING"$ESC""$RED":  This will remove all software installed with Home Brew!"$ESC""`
`echo -e ""$RED"Any processes currently running from software installed by Home Brew will encounter serious failures!"$ESC""`
EOM
    exit 1
fi

# Check for MacPorts install
if [ -f /opt/local/bin/port ]; then
    cat << EOM

`echo -e ""$RED"It looks like you have MacPorts installed. This could seriously conflict with pkgsrc!"`
`echo -e "As we don't wish to affect what you may have implemented, we'll leave it up to you to"`
`echo -e "remove it."$ESC""`

`echo -e ""$BLUE_UL"Once your system is rid of MacPorts; simply re-run this script to get going again!"$ESC""`

For now, here are the steps you need to take (with root privileges) to eradicate MacPorts from your system:

port -fp uninstall installed
rm -rf /opt/local
rm -rf /Applications/{DarwinPorts,MacPorts}
rm -rf /Library/{LaunchDaemons/org.macports.*,Receipts/DarwinPorts*.pkg,\\
Receipts/MacPorts*.pkg,Receipts/MacPorts*.pkg,Tcl/darwinports1.0,Tcl/macports1.0}
rm -rf ~/.macports

`echo -e ""$RED_UL"WARNING"$ESC""$RED":  This will remove all software installed with MacPorts!"$ESC""`
`echo -e ""$RED"Any processes currently running from software installed by MacPorts will encounter serious failures!"$ESC""`
EOM
    exit 1
fi

# Download and install pkgin
echo "Fetching pkgin from the Save OS X repo..."

# Download the bootstrap, if not already there (from multiple runs)
if [ ! -f "${BOOTSTRAP_TARBALL}" ] ; then
    saferun curl -s -o "${BOOTSTRAP_TARBALL}" http://pkgsrc.saveosx.org/Darwin/bootstrap/bootstrap-x86_64-2014Q4.tar.gz # Safely retrive the x86_64 pkgin bootstrap from the Save OS X repo
fi

echo -e "pkgin retrieved successfully, proceeding to install...\n"
sudo tar xfP "${BOOTSTRAP_TARBALL}" -C / &> /dev/null # extract the pkgin bootstrap in the root directory
echo -e "\n"$GREEN"pkgin installed."$ESC" Adding Save OS X repo..."

# Add Save OS X repo
if [ ! $(grep 'saveosx' /usr/pkg/etc/pkgin/repositories.conf) ]; then
    echo "http://pkgsrc.saveosx.org/Darwin/2014Q4/x86_64/All" | sudo tee -a /usr/pkg/etc/pkgin/repositories.conf > /dev/null
fi

echo "Your system has now been set up to use the Save OS X repo!"
echo "Updating pkgin repository information..."
saferun sudo /usr/pkg/bin/pkgin -y update # Update the pkgin repository information
echo "Package database updated!"
echo "Setting up GPG for signed packages..."
echo "Importing yrmt's GPG key..."
/usr/pkg/bin/gpg --keyserver hkp://keys.gnupg.net --recv-keys 2D99C8F7 &> /dev/null
echo "Done!"

read -r -p "Press [Enter] to continue..."

# Grab XQuartz
title ""$BLUE_UL"XQuartz + Our X11 Implementation"$ESC""
cat << EOM

`echo -e ""$YELLOW_UL"XQuartz"$ESC""`
XQuartz is an open-source effort to develop a version of the X.Org X Window System that runs on OS X.
Together with supporting libraries and applications, it forms the X11.app that Apple has shipped with
OS X since version 10.5.

`echo -e ""$YELLOW_UL"Our X11 Implementation"$ESC""`
We've put together some little hacks for OS X in an attempt to seamlessly implement an X11 environment,
close to how it would be on any other UNIX-like system. This is achieved using a custom launchd script,
so X launches upon login, and some Aqua UI trickery to hide some elements.

Coupling the above with the wealth of window managers & desktop environments available in our
package repo, you'll feel right at home! Of course, Aqua applications can still be used in conjunction
with X11, so don't fret :)

EOM

# Ask user if they would like to install XQuartz
while :
do
    read -r -p "Would you like to install XQuartz & our X11 environment? [y/n] " ANSWER
    case $ANSWER in
	[yY][eE][sS]|[yY])
            export X_INST="true" 
            break
            ;;
	[nN][oO]|[nN])
            export X_INST="false"
            read -r -p "Press [Enter] to continue..."
            break
            ;;
	*)
            echo "Please answer yes or no..."
    esac
done

if [ $X_INST == "true" ]; then
    bash x-setup
fi

# PATH screen
title ""$GREEN_UL"Update System PATH"$ESC""

# Add binary dirs to system-wide path
echo 
echo -e "Updating \$PATH so new binaries can be found...\n"
echo -e "/usr/pkg/bin\n/usr/pkg/sbin\n/opt/X11/bin" | sudo tee -a /etc/paths.d/saveosx > /dev/null
echo -e "Updating \$MANPATH so new manpages can be found...\n"
echo -e "MANPATH /usr/pkg/man\nMANPATH /usr/pkg/share/man" | sudo tee -a /etc/man.conf > /dev/null

# Check user's shell
SHELLRC=~/.$(echo $SHELL | cut -d'/' -f3)rc
echo "It looks like your shell's rc file is $SHELLRC"
while :
do
    read -r -p "Add system PATH evaluation to $SHELLRC or another file? [yes/other] " ANSWER
    case $ANSWER in
	[yY][eE][sS]|[yY])
            break
            ;;
	[oO][tT][hH][eE][rR])
            export SHELLRC="user_defined" 
            break
            ;;
	*)
            echo "Please answer 'yes' or 'other'..."
            echo 
    esac
done

# Ask for user's shell if necessary
if [ $SHELLRC == "user_defined" ]; then
    read -r -p "Please enter the full path to your shell's rc file: " SHELLRC
    export SHELLRC
fi

if [ ! -f $SHELLRC ]; then
    echo -e "It doesn't look like $SHELLRC exists...\nA new shell rc will be created\n"
fi

# Update user's shell rc file with new $PATH 
if [[ ! $(grep "path_helper" $SHELLRC) ]]; then
    echo -e "\n# Evaluate system PATH\nif [ -x /usr/libexec/path_helper ]; then\n    eval \`/usr/libexec/path_helper -s\`\nfi" >> $SHELLRC
fi

# Evaluate system path to circumvent explicit calls of new binaries
if [ -x /usr/libexec/path_helper ]; then
    eval `/usr/libexec/path_helper -s`
fi

echo 
echo -e ""$GREEN"Your system's \$PATH has been updated"$ESC"\n\n"
read -r -p "Press [Enter] to continue..."

# Final screen!
title ""$GREEN_UL"Hurrah! You Saved OS X!"$ESC""
cat << EOM

All processes are complete! So what now? Well, we reccomend you read the
manpage for pkgin at least, as you'll be managing all your non-Apple software
with this excellent package manager.

From here, if you opted for X, get your environment set up, and more importantly; enjoy!

EOM
echo -e ""$BLUE"Please visit "$BLUE_UL"http://saveosx.org/"$ESC""$BLUE" for all the latest news and other ramblings from the authors:"$ESC""
echo -e ""$YELLOW"Youri Mouton & Calum MacRae"$ESC""
echo 
echo "You can reach us at: youri.mout@gmail.com & calum0macrae@gmail.com"
echo -e "\n\n"
echo -e ""$GREEN"Thanks for using Save OS X!"$ESC""
exit 0
